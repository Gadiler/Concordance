# Concordance
A "concordance" is an alphabetical list of the words present in a text with a count of how 
often every word appears and quotes where each word appears in the text. to [read more.]

The program takes in a text file containing English text
and produces a list of all words by alphabetic order with the word line number.

The language used: **Java**

## introduction:
There are 2 data structures.
1. Red-Black Tree.
2. Singly Linked List.

At the main function, we create two threads to check **_ what data is faster _**.
Any thread have his own anonymous inner class `run` with creating a relevant concordance.


## Run Instructions: 
In the package, there are two files. one for the input file and the other for the output.
For changing the text input, edit the file `inputText.txt`.

## Logic:
The high-level logic of the program is based on the use of a filter reader
class to parse the text, and store words in the data structures along with other details.

### RBTree Structure:
The structure, as we can see in the [ Red-black Tree diagram ] file, 
is Red-Black Tree containing LinkedList of line-number.
Any RBTNode containing:
* LinkedList of data
* RBTNode: `parent`, `left` and `right` child.
* inner LinkedList containing:
	* data-> `word` 
	* SinglyLinkedList-> `head` and `tail`.

## Complexity:
* Filling the tree takes O(nlg(n)) 
	* O(n) to run through all the words in the text file.
	* O(lg(n)) to store \ search \ other operation of RB-Tree.
	* **'n' is the number of words in the text.**



### SLList Structure:
The data structure, as we can see in the  file,
is Singly Linked-List contining Linked-List of line-number.
Any SLL containing:
- LinkedList-> data: `Head` \ `Tail`.
- `Size` -> number of words.
* inner SLL containing:
	* LinkedList-> data: `word` 
	* LinkedList-> `Head` \ `Tail`: reference to the first \ last node.
	
---	
# Pseudo code:
```java
Concordance() {

	while ( hasNext() ) {				// Run through any word in the textFile {O(n)}.
		while ( whiteSpace ) { skip }
		if  ( word.length > 2 && word != "the" ) 
			insert( word, lineNumber );	// O(lg(n))
	} 						// End of loop.
	display();					// O(n)
}

insert( String, int ) {

	temp = searchWord( word );  			// If null - not exist, create new Node with the word and insert.
	
	if ( temp == null ) {				// else - add the lineNum to the tail of the LinkedList. {O(lg(n))}
		temp = new RBTNode;	
	}else {
		while ( !rightPlace ) {			// Run till the right place for the new RBTNode \ SLLNode.
			root = root.next;		// If (RBTree && greater than), next = right. otherwise next = left.
		}					// If (SLList && greater than), next = next.next. otherwise - insert.
		temp = root.next;
	}
	fixInsert(); 					// Fix the insertion by the Red-Black Tree algorithm. -> only at the RBTree data structure.
}
```